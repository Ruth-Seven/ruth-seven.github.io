<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://blog.come2rss.xyz/atom.xml" rel="self"/>
  
  <link href="https://blog.come2rss.xyz/"/>
  <updated>2021-07-28T00:19:41.170Z</updated>
  <id>https://blog.come2rss.xyz/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二叉树中距离为K的节点</title>
    <link href="https://blog.come2rss.xyz/2021/07/28/shua-ti/shu-ju-jie-gou/shu/er-cha-shu-zhong-ju-chi-wei-k-de-jie-dian/"/>
    <id>https://blog.come2rss.xyz/2021/07/28/shua-ti/shu-ju-jie-gou/shu/er-cha-shu-zhong-ju-chi-wei-k-de-jie-dian/</id>
    <published>2021-07-28T00:17:27.000Z</published>
    <updated>2021-07-28T00:19:41.170Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;这题还是有点点复杂的，距离为K的节点，完全可以分为两类，&lt;code&gt;target&lt;/code&gt;节点构成树的K-dis节点，和其路径经过&lt;code&gt;target&lt;/code&gt;祖父节点的节点。分类搜索即可，考虑到后者需要定点采集，所以用回溯的方式获取。&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>7.整数反转</title>
    <link href="https://blog.come2rss.xyz/2021/07/26/shua-ti-shu-xue-7-zheng-shu-fan-zhuan/"/>
    <id>https://blog.come2rss.xyz/2021/07/26/shua-ti-shu-xue-7-zheng-shu-fan-zhuan/</id>
    <published>2021-07-26T14:45:51.000Z</published>
    <updated>2021-07-26T14:46:39.820Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;7-整数反转&quot;&gt;&lt;a href=&quot;#7-整数反转&quot; class=&quot;headerlink&quot; title=&quot;7. 整数反转&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-integer/&quot;&gt;7. 整数反转&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这题还挺有意思的哈哈，反向思维，既然不能用int64。那我就限制好边界。&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数学
" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>小林家的龙女仆</title>
    <link href="https://blog.come2rss.xyz/2021/07/19/sui-tan/xiao-lin-jia-de-long-nu-pu/"/>
    <id>https://blog.come2rss.xyz/2021/07/19/sui-tan/xiao-lin-jia-de-long-nu-pu/</id>
    <published>2021-07-18T23:42:34.000Z</published>
    <updated>2021-07-18T23:43:59.740Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;小林家的龙女仆の感动的台词&quot;&gt;&lt;a href=&quot;#小林家的龙女仆の感动的台词&quot; class=&quot;headerlink&quot; title=&quot;小林家的龙女仆の感动的台词&quot;&gt;&lt;/a&gt;小林家的龙女仆の感动的台词&lt;/h1&gt;</summary>
    
    
    
    <category term="随谈" scheme="https://blog.come2rss.xyz/categories/%E9%9A%8F%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树的两个错误节点</title>
    <link href="https://blog.come2rss.xyz/2021/07/11/shua-ti/shu-ju-jie-gou/shu/er-cha-shu-de-liang-ge-cuo-wu-jie-dian/"/>
    <id>https://blog.come2rss.xyz/2021/07/11/shua-ti/shu-ju-jie-gou/shu/er-cha-shu-de-liang-ge-cuo-wu-jie-dian/</id>
    <published>2021-07-11T00:32:34.000Z</published>
    <updated>2021-07-11T00:33:52.840Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;CD169-找到搜索二叉树中两个错误的节点&quot;&gt;&lt;a href=&quot;#CD169-找到搜索二叉树中两个错误的节点&quot; class=&quot;headerlink&quot; title=&quot;CD169 找到搜索二叉树中两个错误的节点&quot;&gt;&lt;/a&gt;&lt;strong&gt;CD169&lt;/strong&gt; &lt;strong&gt;找到搜索二叉树中两个错误的节点&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;如果两个节点交换，那么在中序遍历里就有至少一次降序，可能有两个相邻的节点交换，或者两个不相邻的节点交换，产生一个或两次降序。&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树累加和的最长路径</title>
    <link href="https://blog.come2rss.xyz/2021/07/09/shua-ti/shu-ju-jie-gou/shu/er-cha-shu-lei-jia-he-de-zui-chang-lu-jing/"/>
    <id>https://blog.come2rss.xyz/2021/07/09/shua-ti/shu-ju-jie-gou/shu/er-cha-shu-lei-jia-he-de-zui-chang-lu-jing/</id>
    <published>2021-07-09T01:37:05.000Z</published>
    <updated>2021-07-09T01:37:36.810Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;CD165-在二叉树中找到累加和为指定值的最长路径长度&quot;&gt;&lt;a href=&quot;#CD165-在二叉树中找到累加和为指定值的最长路径长度&quot; class=&quot;headerlink&quot; title=&quot;CD165 在二叉树中找到累加和为指定值的最长路径长度&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/2d35bc3364e3470381bc4eebd9178747?tpId=101&amp;&amp;tqId=33233&amp;rp=1&amp;ru=/ta/programmer-code-interview-guide&amp;qru=/ta/programmer-code-interview-guide/question-ranking&quot;&gt;&lt;strong&gt;CD165&lt;/strong&gt; &lt;strong&gt;在二叉树中找到累加和为指定值的最长路径长度&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;写的好心酸， 明明只有有类似的题目接触到。又是没思考就动手&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;先静态化构造二叉树（不要嫌麻烦，一题写好了所有题目都可以用）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前序遍历节点，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录根节点到当前节点的综合&lt;code&gt;newadd&lt;/code&gt;，只记录最短长度的&lt;code&gt;newadd&lt;/code&gt;路径。&lt;/li&gt;
&lt;li&gt;同时判断，&lt;code&gt;newadd - target&lt;/code&gt;之和是否有在当前遍历路径下，是否存在从根节点到同路径的某个节点连成的路径。&lt;/li&gt;
&lt;li&gt;最后回溯时，为了下次遍历路径不受这里遍历数据影响，消减掉当次遍历时候设置新路径长度。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>非递归遍历二叉树</title>
    <link href="https://blog.come2rss.xyz/2021/07/05/shua-ti/shu-ju-jie-gou/shu/fei-di-gui-bian-li-er-cha-shu/"/>
    <id>https://blog.come2rss.xyz/2021/07/05/shua-ti/shu-ju-jie-gou/shu/fei-di-gui-bian-li-er-cha-shu/</id>
    <published>2021-07-05T01:28:08.000Z</published>
    <updated>2021-07-05T01:28:55.610Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;三种非递归遍历的方法&quot;&gt;&lt;a href=&quot;#三种非递归遍历的方法&quot; class=&quot;headerlink&quot; title=&quot;三种非递归遍历的方法&quot;&gt;&lt;/a&gt;三种非递归遍历的方法&lt;/h2&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>删除无序链表的重复数字</title>
    <link href="https://blog.come2rss.xyz/2021/06/28/shua-ti-shu-ju-jie-gou-lian-biao-shan-chu-wu-xu-lian-biao-de-chong-fu-shu-zi/"/>
    <id>https://blog.come2rss.xyz/2021/06/28/shua-ti-shu-ju-jie-gou-lian-biao-shan-chu-wu-xu-lian-biao-de-chong-fu-shu-zi/</id>
    <published>2021-06-28T01:38:58.000Z</published>
    <updated>2021-06-28T01:40:48.210Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;选择排序+删除连续重复值（结果被排序）&lt;/li&gt;
&lt;li&gt;选择直接删除重复值&lt;/li&gt;
&lt;li&gt;hash删除重复值&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="链表
" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>单链表中K节点逆序</title>
    <link href="https://blog.come2rss.xyz/2021/06/26/shua-ti-shu-ju-jie-gou-lian-biao-dan-lian-biao-zhong-k-jie-dian-ni-xu/"/>
    <id>https://blog.come2rss.xyz/2021/06/26/shua-ti-shu-ju-jie-gou-lian-biao-dan-lian-biao-zhong-k-jie-dian-ni-xu/</id>
    <published>2021-06-26T01:45:38.000Z</published>
    <updated>2021-06-26T01:49:09.170Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;



&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;超级大杂烩，左程云出的题的风格。&lt;/p&gt;
&lt;p&gt;K节点逆序+ K节点检测 +</summary>
        
      
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="链表
" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>约瑟夫问题</title>
    <link href="https://blog.come2rss.xyz/2021/06/22/shua-ti-shu-ju-jie-gou-lian-biao-yue-se-fu-wen-ti/"/>
    <id>https://blog.come2rss.xyz/2021/06/22/shua-ti-shu-ju-jie-gou-lian-biao-yue-se-fu-wen-ti/</id>
    <published>2021-06-22T00:42:23.000Z</published>
    <updated>2021-06-22T00:52:14.980Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h2&gt;&lt;p&gt;实际上是一个非常巧妙的数学问题。&lt;/p&gt;
&lt;p&gt;从结果上来看， 如果只剩最后一个人（最后的幸存者），那么被杀掉一定是它。那么它的当前号码为1，问其原坐标？思考一下新旧人列的下标关系：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-shell&quot; data-language=&quot;shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;Old(k+1) : 
1 2 3 4 5 6 7 --- k + 1 
New(k)
4 5 6    m -1 (s) 1 2 3 &lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可能的一种形式，其中s是old被杀掉的人的下标。 且s  = (m - 1 )% (k + 1) + 1&lt;/p&gt;
&lt;p&gt;但不难发现有： old = (new + s - 1) % (k + 1) + 1&lt;/p&gt;
&lt;p&gt;综上有逆推式： old =(new + m - 1) % (k + 1) + 1&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="链表
" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>人生的不幸</title>
    <link href="https://blog.come2rss.xyz/2021/06/19/sui-tan/ren-sheng-de-bu-xing/"/>
    <id>https://blog.come2rss.xyz/2021/06/19/sui-tan/ren-sheng-de-bu-xing/</id>
    <published>2021-06-19T03:55:25.000Z</published>
    <updated>2021-06-19T03:56:42.280Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;人生中最痛苦不是身体残疾，目不能视，耳不能听；也不是原生家庭带来性格扭曲，从小的身微言轻，家境清贫；更不是高考落榜，身陷囹圄，工作遇阻。而是无法接受现状，不能认清自我的能力的边界，贪求不能现在得到的欲望，终日惶惶思索财路，入睡夜夜欲求不止。这种终身收自己精神折磨的人，从不愿</summary>
        
      
    
    
    
    <category term="随谈" scheme="https://blog.come2rss.xyz/categories/%E9%9A%8F%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>1239. 串联字符串的最大长度</title>
    <link href="https://blog.come2rss.xyz/2021/06/19/shua-ti-wei-yun-suan-1239-chuan-lian-zi-fu-chuan-de-zui-da-chang-du/"/>
    <id>https://blog.come2rss.xyz/2021/06/19/shua-ti-wei-yun-suan-1239-chuan-lian-zi-fu-chuan-de-zui-da-chang-du/</id>
    <published>2021-06-19T03:47:14.000Z</published>
    <updated>2021-06-19T03:49:29.460Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h2&gt;&lt;p&gt;二进制化 + 二位搜索&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="位运算
" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    
  </entry>
  
  <entry>
    <title>最大值减去最小值小于或等于num的子数组数量</title>
    <link href="https://blog.come2rss.xyz/2021/06/17/shua-ti/shu-ju-jie-gou/zhan-he-dui-lie/zui-da-zhi-jian-qu-zui-xiao-zhi-xiao-yu-huo-deng-yu-num-de-zi-shu-zu-shu-liang/"/>
    <id>https://blog.come2rss.xyz/2021/06/17/shua-ti/shu-ju-jie-gou/zhan-he-dui-lie/zui-da-zhi-jian-qu-zui-xiao-zhi-xiao-yu-huo-deng-yu-num-de-zi-shu-zu-shu-liang/</id>
    <published>2021-06-17T00:45:14.000Z</published>
    <updated>2021-06-17T00:45:49.260Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;最大值减去最小值小于或等于num的子数组数量&quot;&gt;&lt;a href=&quot;#最大值减去最小值小于或等于num的子数组数量&quot; class=&quot;headerlink&quot; title=&quot;最大值减去最小值小于或等于num的子数组数量&quot;&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/5fe02eb175974e18b9a546812a17428e?tpId=101&amp;&amp;tqId=33086&amp;rp=1&amp;ru=/ta/programmer-code-interview-guide&amp;qru=/ta/programmer-code-interview-guide/question-ranking&quot;&gt;最大值减去最小值小于或等于num的子数组数量&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;超级复合怪&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="栈和队列" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>最大子矩阵</title>
    <link href="https://blog.come2rss.xyz/2021/05/26/shua-ti/shu-ju-jie-gou/zhan-he-dui-lie/zui-da-zi-ju-zhen/"/>
    <id>https://blog.come2rss.xyz/2021/05/26/shua-ti/shu-ju-jie-gou/zhan-he-dui-lie/zui-da-zi-ju-zhen/</id>
    <published>2021-05-26T00:40:43.000Z</published>
    <updated>2021-05-26T01:21:56.010Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;类似于面试题17.24；&lt;/p&gt;
&lt;p&gt;不过是每个单元的元素只是一，可以把问题转化为求取面积。&lt;/p&gt;
&lt;p&gt;直接用单调栈求取从一个柱子可扩展的的最大面积即可。&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot;</summary>
        
      
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="栈和队列" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>面试题 17.24. 最大子矩阵</title>
    <link href="https://blog.come2rss.xyz/2021/05/10/shua-ti/dp/mian-shi-ti-17-24-zui-da-zi-ju-zhen/"/>
    <id>https://blog.come2rss.xyz/2021/05/10/shua-ti/dp/mian-shi-ti-17-24-zui-da-zi-ju-zhen/</id>
    <published>2021-05-10T01:36:53.000Z</published>
    <updated>2021-05-26T01:21:56.010Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;面试题-17-24-最大子矩阵&quot;&gt;&lt;a href=&quot;#面试题-17-24-最大子矩阵&quot; class=&quot;headerlink&quot; title=&quot;面试题 17.24. 最大子矩阵&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/max-submatrix-lcci/&quot;&gt;面试题 17.24. 最大子矩阵&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h2&gt;&lt;p&gt;本题是最大连续子数组的二维follow up.&lt;/p&gt;
&lt;p&gt;一维情况下，可以直接使用多种算法求解：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;累加数组+二维搜索左右边界， $O(N^2)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;二维搜索左右边界同时累加数字，$O(N^2)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分治算法，把问题&lt;code&gt;maxarr(i, j)&lt;/code&gt;分解为&lt;code&gt;maxarr(i, mid)&lt;/code&gt;和&lt;code&gt;maxarr(mid + 1, j)&lt;/code&gt;。其中子数组可能在左右两端数组中或者横跨两个段，所以从中间向两边搜索最大连续数组和&lt;code&gt;Sum1&lt;/code&gt;，如此解决了一个基本问题，并且递归的将小问题解决，获取总的问题的解。$O(NLogN)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线段树做法，同样也是分治的思想，但是考虑的更多。&lt;code&gt;maxarr(i, j)&lt;/code&gt;分解为&lt;code&gt;maxarr(i, mid)&lt;/code&gt;和&lt;code&gt;maxarr(mid + 1, j)&lt;/code&gt;。基本问题是&lt;code&gt;arr(i, j)&lt;/code&gt;中的&lt;code&gt;suml&lt;/code&gt;，&lt;code&gt;sumr&lt;/code&gt;, &lt;code&gt;sumi&lt;/code&gt;和&lt;code&gt;summ&lt;/code&gt;，分别代表从左边开始的子数组的和，从右边开始的子数组的和，在中间扩展的子数组的和，和整个数组的和。而我们要大问题的&lt;code&gt;sumi&lt;/code&gt;就是所要求的值，巧妙的地方在于问题的分解，&lt;code&gt;sumi&lt;/code&gt;可以就是子数组的&lt;code&gt;sumi&lt;/code&gt;和左子段的&lt;code&gt;sumr&lt;/code&gt;与右子段的&lt;code&gt;suml&lt;/code&gt;之和最大值。其他同理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DP做法，以&lt;code&gt;dp[i]&lt;/code&gt;为&lt;code&gt;arr[i]&lt;/code&gt;为结尾的和最大的连续子数组的和。状态更新方程为&lt;br&gt;$$&lt;br&gt;dp[i] = max(dp[i - 1] + arr[i], arr[i])&lt;br&gt;$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这很有趣，实际上就是舍弃掉可能为负数的&lt;code&gt;dp[i - 1]&lt;/code&gt;， 另外在舍弃时也可以记录下数组起点。更进一步的观察，空间可以优化到&lt;code&gt;O(1)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;二维情况下，虽然非常相似，但是解法一时想不到直接扩展到二维。但是问题可以化解为一维。&lt;/p&gt;
&lt;p&gt;在确定了矩阵行数据，或者首先遍历矩阵的上下界后，顺道求出该矩阵的在各各列的和。之后便可以用一维的做法求出连续列的最大和。&lt;/p&gt;
&lt;p&gt;复杂$O(N^3)$。&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="DP" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/DP/"/>
    
    
  </entry>
  
  <entry>
    <title>二分图匹配</title>
    <link href="https://blog.come2rss.xyz/2021/05/09/shua-ti-shu-ju-jie-gou-tu-er-fen-tu-pi-pei/"/>
    <id>https://blog.come2rss.xyz/2021/05/09/shua-ti-shu-ju-jie-gou-tu-er-fen-tu-pi-pei/</id>
    <published>2021-05-09T05:03:11.000Z</published>
    <updated>2021-05-09T06:03:00.086Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;二分图匹配&quot;&gt;&lt;a href=&quot;#二分图匹配&quot; class=&quot;headerlink&quot; title=&quot;二分图匹配&quot;&gt;&lt;/a&gt;二分图匹配&lt;/h1&gt;&lt;p&gt;二分图匹配是个经典问题——两组节点在图上尽可能的匹配。&lt;/p&gt;
&lt;p&gt;匈牙利算法以不断寻找增光路的方式，寻找更多的匹配;&lt;/p&gt;
&lt;p&gt;思想如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从未匹配的点&lt;code&gt;c&lt;/code&gt;开始寻找链接的点&lt;code&gt;v&lt;/code&gt;，如果&lt;code&gt;v&lt;/code&gt;也是未匹配，则匹配成功。如果该点已经匹配了&lt;code&gt;u&lt;/code&gt;，则递归尝试让&lt;code&gt;u&lt;/code&gt;匹配其他节点。&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;v&lt;/code&gt;匹配失败，那就找找&lt;code&gt;c&lt;/code&gt;的其他点。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/circle/article/SCLpQf/&quot;&gt;题解参考&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="图
" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>割点算法</title>
    <link href="https://blog.come2rss.xyz/2021/05/09/shua-ti-shu-ju-jie-gou-tu-ge-dian-suan-fa/"/>
    <id>https://blog.come2rss.xyz/2021/05/09/shua-ti-shu-ju-jie-gou-tu-ge-dian-suan-fa/</id>
    <published>2021-05-09T03:34:08.000Z</published>
    <updated>2021-05-09T03:37:46.240Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;割点算法Tarjan&quot;&gt;&lt;a href=&quot;#割点算法Tarjan&quot; class=&quot;headerlink&quot; title=&quot;割点算法Tarjan&quot;&gt;&lt;/a&gt;割点算法Tarjan&lt;/h2&gt;&lt;p&gt;割点算法 引入了建立在DFS生成树的遍历节点的时间戳概念，如果一个节点&lt;code&gt;u&lt;/code&gt;的子节点&lt;code&gt;v&lt;/code&gt;可以找到一条不经过&lt;code&gt;u&lt;/code&gt;以外的路径到达&lt;code&gt;u&lt;/code&gt;的祖先，那么显然有一条通路可以回到&lt;code&gt;u&lt;/code&gt;的祖先。反之，如果存在&lt;code&gt;v&lt;/code&gt;找不到这么一条路径回到&lt;code&gt;u&lt;/code&gt;的祖先，那么显然&lt;code&gt;u&lt;/code&gt;是一个割点，他分割了&lt;code&gt;v&lt;/code&gt;所在的子树和其他子树（如果&lt;code&gt;u&lt;/code&gt;不是根的话，包括祖先所在子树）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.come2rss.xyz/image-20210509113600747.png&quot; alt=&quot;image-20210509113600747&quot;&gt;&lt;/p&gt;
&lt;p&gt;那么一个割点有多少子树呢？&lt;br&gt;首先，一个割点的对应的&lt;code&gt;v&lt;/code&gt;是独立在各个子树的吗？是的，如果存在&lt;code&gt;v1&lt;/code&gt;和&lt;code&gt;v2&lt;/code&gt;都找到路径，且在一个子树中，那么必然有&lt;code&gt;v1&lt;/code&gt;可以通过&lt;code&gt;v2&lt;/code&gt;找到&lt;code&gt;u&lt;/code&gt;，那么在DFS搜索的时候，必定会一次遍历&lt;code&gt;v1&lt;/code&gt;和&lt;code&gt;v2&lt;/code&gt;。所以每个割点对应的子树只会搜索到一个&lt;code&gt;v&lt;/code&gt;。&lt;br&gt;扩展一下， 那么经过去掉割点的图最多有几个连通块？&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="图
" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>847. 访问所有节点的最短路径</title>
    <link href="https://blog.come2rss.xyz/2021/05/08/shua-ti-shu-ju-jie-gou-tu-847-fang-wen-suo-you-jie-dian-de-zui-duan-lu-jing/"/>
    <id>https://blog.come2rss.xyz/2021/05/08/shua-ti-shu-ju-jie-gou-tu-847-fang-wen-suo-you-jie-dian-de-zui-duan-lu-jing/</id>
    <published>2021-05-08T09:02:09.000Z</published>
    <updated>2021-05-08T09:04:58.030Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;847-访问所有节点的最短路径&quot;&gt;&lt;a href=&quot;#847-访问所有节点的最短路径&quot; class=&quot;headerlink&quot; title=&quot;847. 访问所有节点的最短路径&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/shortest-path-visiting-all-nodes/&quot;&gt;847. 访问所有节点的最短路径&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h2&gt;&lt;p&gt;旅行商问题~真难！&lt;/p&gt;
&lt;h3 id=&quot;DFS搜索&quot;&gt;&lt;a href=&quot;#DFS搜索&quot; class=&quot;headerlink&quot; title=&quot;DFS搜索&quot;&gt;&lt;/a&gt;DFS搜索&lt;/h3&gt;&lt;p&gt;dfs搜索回溯貌似可行，但是没有明确的停止条件&lt;/p&gt;
&lt;h3 id=&quot;BFS搜索&quot;&gt;&lt;a href=&quot;#BFS搜索&quot; class=&quot;headerlink&quot; title=&quot;BFS搜索&quot;&gt;&lt;/a&gt;BFS搜索&lt;/h3&gt;&lt;p&gt;bfs搜索状态&lt;code&gt;state(cover, head)&lt;/code&gt;可行。其中&lt;code&gt;cover&lt;/code&gt;用位状态表示搜索过的节点的集合，&lt;code&gt;head&lt;/code&gt;表示当前遍历的头结点。搜索的更新的&lt;code&gt;new cover = cover | 1 &amp;lt;&amp;lt; newhead&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="图
" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>312. Burst Balloons</title>
    <link href="https://blog.come2rss.xyz/2021/05/05/shua-ti/dp/312-burst-balloons/"/>
    <id>https://blog.come2rss.xyz/2021/05/05/shua-ti/dp/312-burst-balloons/</id>
    <published>2021-05-05T06:50:56.000Z</published>
    <updated>2021-05-05T07:44:31.960Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;312-Burst-Balloons&quot;&gt;&lt;a href=&quot;#312-Burst-Balloons&quot; class=&quot;headerlink&quot; title=&quot;312. Burst Balloons&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/burst-balloons/&quot;&gt;312. Burst Balloons&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h2&gt;&lt;p&gt; &lt;code&gt;Hard&lt;/code&gt;题做了才有收获啊！&lt;code&gt;lc&lt;/code&gt;上题库里几道经典的具有锻炼思维和思考能力的题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;拿到手，首先映入脑海里明显应该是贪心或者分治算法：仔细思考一下，贪心发现没有依据，也没有例子；分治算法把考虑把求取问题&lt;code&gt;dp(l, r)&lt;/code&gt;——开区间的&lt;code&gt;(l,r)&lt;/code&gt;一组气球全部戳爆以后，可以获取最大金币数量。如果第一选取&lt;code&gt;k&lt;/code&gt;个气球戳爆，则有子问题&lt;code&gt;(l,k)&lt;/code&gt;和&lt;code&gt;(k,r)&lt;/code&gt;，但是可以发现两个子问题是相互依赖的。也就是说一个问题解的选择会影响另一个问题的解的选择。所以这个思路也不行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Amazing&lt;/code&gt;的是，我们可以反过来考虑问题！我们把整个过程逆序，把戳爆存在的气球，变成从一个气球都不存在，添加一个个不存在的气球。&lt;code&gt;dp(l, r)&lt;/code&gt;问题就是在寻找，把&lt;code&gt;(l, r)&lt;/code&gt;中的所有位置填满气球，可以获得最大金币数量。思考一下如何分解为子问题：&lt;br&gt;$$&lt;br&gt;dp(l, r) = max_{i = l + 1}^{r - 1}[dp(l , i) + dp(i, r) + nums[i] * nums[l] * nums[r]]&lt;br&gt;$$&lt;br&gt;具体计算可以用记忆化搜索和DP计算。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;看了下大神的解法，居然还有用启发式搜索的！太顶了！&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="DP" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/DP/"/>
    
    
  </entry>
  
  <entry>
    <title>cmake学习索引</title>
    <link href="https://blog.come2rss.xyz/2021/05/04/code-tools/build/cmake-xue-xi-suo-yin/"/>
    <id>https://blog.come2rss.xyz/2021/05/04/code-tools/build/cmake-xue-xi-suo-yin/</id>
    <published>2021-05-03T16:09:43.000Z</published>
    <updated>2021-05-03T16:16:41.760Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Cmake笔记&quot;&gt;&lt;a href=&quot;#Cmake笔记&quot; class=&quot;headerlink&quot; title=&quot;Cmake笔记&quot;&gt;&lt;/a&gt;Cmake笔记&lt;/h1&gt;&lt;p&gt;Cmake是跨系统，C++现行标准构建标准的build system of build system`.&lt;/p&gt;
&lt;p&gt;比较好的学习资源如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://internalpointers.com/post/modern-cmake-beginner-introduction&quot;&gt;understand Cmake&lt;/a&gt; ✅: 一个简单的接受&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cmake.org/&quot;&gt;cmake official web&lt;/a&gt; ： 对各个命令有最详细的解释，当字典用&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@onur.dundar1/cmake-tutorial-585dd180109b&quot;&gt;Cmake Tutorial&lt;/a&gt;: 💖从零基础解释CMake基础概念，看完这个再看官方教程就很简单了&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cmake.org/cmake/help/latest/guide/tutorial/index.html&quot;&gt;cmake tutorial&lt;/a&gt; ✅ ：跟着做比较有意思，可以多多尝试，就是有点花时间。后面部分内容可以看看&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cliutils.gitlab.io/modern-cmake/chapters/intro/newcmake.html&quot;&gt;Cmake Detailed tutorial&lt;/a&gt; ✅: 最详细，有很多项目经验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看完了，直接上手项目或者看其他开源项目如何管理也是有点启发滴。当然对照着一个真实项目学习Cmake也有点帮助。&lt;/p&gt;</summary>
    
    
    
    <category term="Code tools" scheme="https://blog.come2rss.xyz/categories/Code-tools/"/>
    
    <category term="build" scheme="https://blog.come2rss.xyz/categories/Code-tools/build/"/>
    
    
  </entry>
  
  <entry>
    <title>438. Find All Anagrams in a String</title>
    <link href="https://blog.come2rss.xyz/2021/04/30/shua-ti/shuang-zhi-zhen/438-find-all-anagrams-in-a-string/"/>
    <id>https://blog.come2rss.xyz/2021/04/30/shua-ti/shuang-zhi-zhen/438-find-all-anagrams-in-a-string/</id>
    <published>2021-04-30T05:15:01.000Z</published>
    <updated>2021-04-30T06:24:07.457Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h2&gt;&lt;p&gt;双指针，指向模式串&lt;code&gt;str&lt;/code&gt;的子串首位&lt;code&gt;s&lt;/code&gt;和末尾+1&lt;code&gt;e&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;遍历思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不断添加&lt;code&gt;e&lt;/code&gt;位置上的字符&lt;code&gt;c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;c&lt;/code&gt;不属于&lt;code&gt;p&lt;/code&gt;，则双指针跳过&lt;code&gt;c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;c&lt;/code&gt;属于&lt;code&gt;p&lt;/code&gt;，则更新。&lt;ol&gt;
&lt;li&gt;但是如果包括的&lt;code&gt;c&lt;/code&gt;字符太多了，则移动&lt;code&gt;s&lt;/code&gt;直至数量符合条件&lt;/li&gt;
&lt;li&gt;如果所有字符数量都添加完全一致，则添加结果。移动&lt;code&gt;s&lt;/code&gt;一位，更新即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;看了其他题解，发现有一个条件我忽略了，指针之间的距离是相等的，也就是说这是一个滑动窗口问题~草了。&lt;/p&gt;
&lt;p&gt;那这很简单，维护一下窗口值就行了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以说滑动窗口就是一个简单的双指针。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="双指针" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    
  </entry>
  
</feed>
