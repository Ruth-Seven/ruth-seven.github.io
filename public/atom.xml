<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://blog.come2rss.xyz/atom.xml" rel="self"/>
  
  <link href="https://blog.come2rss.xyz/"/>
  <updated>2021-09-23T01:19:58.570Z</updated>
  <id>https://blog.come2rss.xyz/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>z字变换</title>
    <link href="https://blog.come2rss.xyz/2021/09/23/shua-ti-mo-ni-z-zi-bian-huan/"/>
    <id>https://blog.come2rss.xyz/2021/09/23/shua-ti-mo-ni-z-zi-bian-huan/</id>
    <published>2021-09-23T01:19:10.000Z</published>
    <updated>2021-09-23T01:19:58.570Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;6-Z-字形变换&quot;&gt;&lt;a href=&quot;#6-Z-字形变换&quot; class=&quot;headerlink&quot; title=&quot;6. Z 字形变换&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/zigzag-conversion/&quot;&gt;6. Z 字形变换&lt;/a&gt;&lt;/h4&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;按行排序（桶排）&lt;/li&gt;
&lt;li&gt;按排遍历&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="模拟
" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>k个一组翻转链表</title>
    <link href="https://blog.come2rss.xyz/2021/09/23/shua-ti-shu-ju-jie-gou-lian-biao-k-ge-yi-zu-fan-zhuan-lian-biao/"/>
    <id>https://blog.come2rss.xyz/2021/09/23/shua-ti-shu-ju-jie-gou-lian-biao-k-ge-yi-zu-fan-zhuan-lian-biao/</id>
    <published>2021-09-23T01:11:51.000Z</published>
    <updated>2021-09-23T01:15:00.860Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;25-K-个一组翻转链表&quot;&gt;&lt;a href=&quot;#25-K-个一组翻转链表&quot; class=&quot;headerlink&quot; title=&quot;25. K 个一组翻转链表&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-nodes-in-k-group/&quot;&gt;25. K 个一组翻转链表&lt;/a&gt;&lt;/h4&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;添加伪头节点，减少复杂度&lt;/p&gt;
&lt;p&gt;提交之前模拟运行&lt;/p&gt;
&lt;p&gt;多种控制条件选择最简单的&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="链表
" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>单词搜索</title>
    <link href="https://blog.come2rss.xyz/2021/09/17/shua-ti/shu-ju-jie-gou/shu/dan-ci-sou-suo/"/>
    <id>https://blog.come2rss.xyz/2021/09/17/shua-ti/shu-ju-jie-gou/shu/dan-ci-sou-suo/</id>
    <published>2021-09-17T00:59:14.000Z</published>
    <updated>2021-09-17T01:00:14.114Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;212-单词搜索-II&quot;&gt;&lt;a href=&quot;#212-单词搜索-II&quot; class=&quot;headerlink&quot; title=&quot;212. 单词搜索 II&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/word-search-ii/&quot;&gt;212. 单词搜索 II&lt;/a&gt;&lt;/h4&gt;&lt;h2 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h2&gt;&lt;p&gt;虽然明明知道硬写一定会，超时，但还是写了一个。&lt;/p&gt;
&lt;p&gt;超时后考虑什么优化：自然想到了字典树。不过没有想透彻：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用字典树构造&lt;code&gt;dfs&lt;/code&gt;遍历的路径，❌ :&lt;code&gt;dfs&lt;/code&gt;搜索的路径不需要被查询，因为只出现一次&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;正确做法：用字典树存储所有&lt;code&gt;words&lt;/code&gt;，方便查询。或者进一步的，在&lt;code&gt;dfs&lt;/code&gt;过程中，可以直接用字典树进行搜索剪枝。&lt;/p&gt;
&lt;p&gt;Orz&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>600. 不含连续1的非负整数</title>
    <link href="https://blog.come2rss.xyz/2021/09/14/shua-ti/dp/600-bu-han-lian-xu-1-de-fei-fu-zheng-shu/"/>
    <id>https://blog.come2rss.xyz/2021/09/14/shua-ti/dp/600-bu-han-lian-xu-1-de-fei-fu-zheng-shu/</id>
    <published>2021-09-14T00:15:11.000Z</published>
    <updated>2021-09-14T00:15:36.649Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;600-不含连续1的非负整数&quot;&gt;&lt;a href=&quot;#600-不含连续1的非负整数&quot; class=&quot;headerlink&quot; title=&quot;600. 不含连续1的非负整数&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/non-negative-integers-without-consecutive-ones/&quot;&gt;600. 不含连续1的非负整数&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h2&gt;&lt;p&gt;经过一个晚上的沉淀，我终于写出了惹~&lt;/p&gt;
&lt;p&gt;这道题我愿意称之为&lt;code&gt;hard&lt;/code&gt;。首先遍历&lt;code&gt;n&lt;/code&gt;是不可行的，其次考虑发现高位上数字变化对地位并没有影响，产生的结果就是子问题的分解和无历史影响性。&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="DP" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/DP/"/>
    
    
  </entry>
  
  <entry>
    <title>Write a diff command</title>
    <link href="https://blog.come2rss.xyz/2021/08/23/sui-tan/write-a-diff-command/"/>
    <id>https://blog.come2rss.xyz/2021/08/23/sui-tan/write-a-diff-command/</id>
    <published>2021-08-23T01:09:54.000Z</published>
    <updated>2021-08-23T01:10:32.640Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;写一个简单的diff&quot;&gt;&lt;a href=&quot;#写一个简单的diff&quot; class=&quot;headerlink&quot; title=&quot;写一个简单的diff&quot;&gt;&lt;/a&gt;写一个简单的&lt;code&gt;diff&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;晚上在看酷壳的 rsync 核心算法，突然感受到算法光芒的笼罩之中，突然想起之前很好奇的一个问题，&lt;code&gt;diff&lt;/code&gt;是怎么实现的？&lt;/p&gt;</summary>
    
    
    
    <category term="随谈" scheme="https://blog.come2rss.xyz/categories/%E9%9A%8F%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>安全状态</title>
    <link href="https://blog.come2rss.xyz/2021/08/05/shua-ti-shu-ju-jie-gou-tu-an-quan-zhuang-tai/"/>
    <id>https://blog.come2rss.xyz/2021/08/05/shua-ti-shu-ju-jie-gou-tu-an-quan-zhuang-tai/</id>
    <published>2021-08-05T12:59:17.000Z</published>
    <updated>2021-08-05T13:00:52.910Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;建图后，需要判断一次深搜路径上有无重复点出现，并用涂色法记录整条路径上的安全或者不安全状态。&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="图
" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>go</title>
    <link href="https://blog.come2rss.xyz/2021/07/30/language/go/generics-in-go/"/>
    <id>https://blog.come2rss.xyz/2021/07/30/language/go/generics-in-go/</id>
    <published>2021-07-30T01:08:21.000Z</published>
    <updated>2021-07-30T01:09:39.389Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;go-generics-came-here&quot;&gt;&lt;a href=&quot;#go-generics-came-here&quot; class=&quot;headerlink&quot; title=&quot;go generics came here!&quot;&gt;&lt;/a&gt;go generics came here!&lt;/h1&gt;&lt;p&gt;在 go1.17 beta 已经实现了go 泛型，虽然它现实在一个不稳定的版本，我已经心心念了好久了，毕竟不是每个人都喜欢自己写一遍各种类型的&lt;code&gt;Min&lt;/code&gt;   。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>之字形标记</title>
    <link href="https://blog.come2rss.xyz/2021/07/29/shua-ti/shu-ju-jie-gou/shu/zhi-zi-xing-biao-ji/"/>
    <id>https://blog.come2rss.xyz/2021/07/29/shua-ti/shu-ju-jie-gou/shu/zhi-zi-xing-biao-ji/</id>
    <published>2021-07-28T23:39:40.000Z</published>
    <updated>2021-07-28T23:42:12.140Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/path-in-zigzag-labelled-binary-tree/&quot;&gt;1104. 二叉树寻路&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;思路其实很清晰，翻转出层序的下标，在遍历的时候，把层序下标翻转回之字下标即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;良好的编程习惯其实蛮重要的，每个变量都有自己的用处。良好的代码对后续的修改友善的。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树中距离为K的节点</title>
    <link href="https://blog.come2rss.xyz/2021/07/28/shua-ti/shu-ju-jie-gou/shu/er-cha-shu-zhong-ju-chi-wei-k-de-jie-dian/"/>
    <id>https://blog.come2rss.xyz/2021/07/28/shua-ti/shu-ju-jie-gou/shu/er-cha-shu-zhong-ju-chi-wei-k-de-jie-dian/</id>
    <published>2021-07-28T00:17:27.000Z</published>
    <updated>2021-07-28T00:19:41.170Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;这题还是有点点复杂的，距离为K的节点，完全可以分为两类，&lt;code&gt;target&lt;/code&gt;节点构成树的K-dis节点，和其路径经过&lt;code&gt;target&lt;/code&gt;祖父节点的节点。分类搜索即可，考虑到后者需要定点采集，所以用回溯的方式获取。&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>7.整数反转</title>
    <link href="https://blog.come2rss.xyz/2021/07/26/shua-ti-shu-xue-7-zheng-shu-fan-zhuan/"/>
    <id>https://blog.come2rss.xyz/2021/07/26/shua-ti-shu-xue-7-zheng-shu-fan-zhuan/</id>
    <published>2021-07-26T14:45:51.000Z</published>
    <updated>2021-07-26T14:46:39.820Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;7-整数反转&quot;&gt;&lt;a href=&quot;#7-整数反转&quot; class=&quot;headerlink&quot; title=&quot;7. 整数反转&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-integer/&quot;&gt;7. 整数反转&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这题还挺有意思的哈哈，反向思维，既然不能用int64。那我就限制好边界。&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数学
" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>小林家的龙女仆</title>
    <link href="https://blog.come2rss.xyz/2021/07/19/sui-tan/xiao-lin-jia-de-long-nu-pu/"/>
    <id>https://blog.come2rss.xyz/2021/07/19/sui-tan/xiao-lin-jia-de-long-nu-pu/</id>
    <published>2021-07-18T23:42:34.000Z</published>
    <updated>2021-07-18T23:43:59.740Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;小林家的龙女仆の感动的台词&quot;&gt;&lt;a href=&quot;#小林家的龙女仆の感动的台词&quot; class=&quot;headerlink&quot; title=&quot;小林家的龙女仆の感动的台词&quot;&gt;&lt;/a&gt;小林家的龙女仆の感动的台词&lt;/h1&gt;</summary>
    
    
    
    <category term="随谈" scheme="https://blog.come2rss.xyz/categories/%E9%9A%8F%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树的两个错误节点</title>
    <link href="https://blog.come2rss.xyz/2021/07/11/shua-ti/shu-ju-jie-gou/shu/er-cha-shu-de-liang-ge-cuo-wu-jie-dian/"/>
    <id>https://blog.come2rss.xyz/2021/07/11/shua-ti/shu-ju-jie-gou/shu/er-cha-shu-de-liang-ge-cuo-wu-jie-dian/</id>
    <published>2021-07-11T00:32:34.000Z</published>
    <updated>2021-07-11T00:33:52.840Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;CD169-找到搜索二叉树中两个错误的节点&quot;&gt;&lt;a href=&quot;#CD169-找到搜索二叉树中两个错误的节点&quot; class=&quot;headerlink&quot; title=&quot;CD169 找到搜索二叉树中两个错误的节点&quot;&gt;&lt;/a&gt;&lt;strong&gt;CD169&lt;/strong&gt; &lt;strong&gt;找到搜索二叉树中两个错误的节点&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;如果两个节点交换，那么在中序遍历里就有至少一次降序，可能有两个相邻的节点交换，或者两个不相邻的节点交换，产生一个或两次降序。&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树累加和的最长路径</title>
    <link href="https://blog.come2rss.xyz/2021/07/09/shua-ti/shu-ju-jie-gou/shu/er-cha-shu-lei-jia-he-de-zui-chang-lu-jing/"/>
    <id>https://blog.come2rss.xyz/2021/07/09/shua-ti/shu-ju-jie-gou/shu/er-cha-shu-lei-jia-he-de-zui-chang-lu-jing/</id>
    <published>2021-07-09T01:37:05.000Z</published>
    <updated>2021-07-09T01:37:36.810Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;CD165-在二叉树中找到累加和为指定值的最长路径长度&quot;&gt;&lt;a href=&quot;#CD165-在二叉树中找到累加和为指定值的最长路径长度&quot; class=&quot;headerlink&quot; title=&quot;CD165 在二叉树中找到累加和为指定值的最长路径长度&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/2d35bc3364e3470381bc4eebd9178747?tpId=101&amp;&amp;tqId=33233&amp;rp=1&amp;ru=/ta/programmer-code-interview-guide&amp;qru=/ta/programmer-code-interview-guide/question-ranking&quot;&gt;&lt;strong&gt;CD165&lt;/strong&gt; &lt;strong&gt;在二叉树中找到累加和为指定值的最长路径长度&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;写的好心酸， 明明只有有类似的题目接触到。又是没思考就动手&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;先静态化构造二叉树（不要嫌麻烦，一题写好了所有题目都可以用）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前序遍历节点，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录根节点到当前节点的综合&lt;code&gt;newadd&lt;/code&gt;，只记录最短长度的&lt;code&gt;newadd&lt;/code&gt;路径。&lt;/li&gt;
&lt;li&gt;同时判断，&lt;code&gt;newadd - target&lt;/code&gt;之和是否有在当前遍历路径下，是否存在从根节点到同路径的某个节点连成的路径。&lt;/li&gt;
&lt;li&gt;最后回溯时，为了下次遍历路径不受这里遍历数据影响，消减掉当次遍历时候设置新路径长度。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>非递归遍历二叉树</title>
    <link href="https://blog.come2rss.xyz/2021/07/05/shua-ti/shu-ju-jie-gou/shu/fei-di-gui-bian-li-er-cha-shu/"/>
    <id>https://blog.come2rss.xyz/2021/07/05/shua-ti/shu-ju-jie-gou/shu/fei-di-gui-bian-li-er-cha-shu/</id>
    <published>2021-07-05T01:28:08.000Z</published>
    <updated>2021-07-05T01:28:55.610Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;三种非递归遍历的方法&quot;&gt;&lt;a href=&quot;#三种非递归遍历的方法&quot; class=&quot;headerlink&quot; title=&quot;三种非递归遍历的方法&quot;&gt;&lt;/a&gt;三种非递归遍历的方法&lt;/h2&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>删除无序链表的重复数字</title>
    <link href="https://blog.come2rss.xyz/2021/06/28/shua-ti-shu-ju-jie-gou-lian-biao-shan-chu-wu-xu-lian-biao-de-chong-fu-shu-zi/"/>
    <id>https://blog.come2rss.xyz/2021/06/28/shua-ti-shu-ju-jie-gou-lian-biao-shan-chu-wu-xu-lian-biao-de-chong-fu-shu-zi/</id>
    <published>2021-06-28T01:38:58.000Z</published>
    <updated>2021-06-28T01:40:48.210Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;选择排序+删除连续重复值（结果被排序）&lt;/li&gt;
&lt;li&gt;选择直接删除重复值&lt;/li&gt;
&lt;li&gt;hash删除重复值&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="链表
" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>单链表中K节点逆序</title>
    <link href="https://blog.come2rss.xyz/2021/06/26/shua-ti-shu-ju-jie-gou-lian-biao-dan-lian-biao-zhong-k-jie-dian-ni-xu/"/>
    <id>https://blog.come2rss.xyz/2021/06/26/shua-ti-shu-ju-jie-gou-lian-biao-dan-lian-biao-zhong-k-jie-dian-ni-xu/</id>
    <published>2021-06-26T01:45:38.000Z</published>
    <updated>2021-06-26T01:49:09.170Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;



&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;超级大杂烩，左程云出的题的风格。&lt;/p&gt;
&lt;p&gt;K节点逆序+ K节点检测 +</summary>
        
      
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="链表
" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>约瑟夫问题</title>
    <link href="https://blog.come2rss.xyz/2021/06/22/shua-ti-shu-ju-jie-gou-lian-biao-yue-se-fu-wen-ti/"/>
    <id>https://blog.come2rss.xyz/2021/06/22/shua-ti-shu-ju-jie-gou-lian-biao-yue-se-fu-wen-ti/</id>
    <published>2021-06-22T00:42:23.000Z</published>
    <updated>2021-06-22T00:52:14.980Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h2&gt;&lt;p&gt;实际上是一个非常巧妙的数学问题。&lt;/p&gt;
&lt;p&gt;从结果上来看， 如果只剩最后一个人（最后的幸存者），那么被杀掉一定是它。那么它的当前号码为1，问其原坐标？思考一下新旧人列的下标关系：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-shell&quot; data-language=&quot;shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;Old(k+1) : 
1 2 3 4 5 6 7 --- k + 1 
New(k)
4 5 6    m -1 (s) 1 2 3 &lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可能的一种形式，其中s是old被杀掉的人的下标。 且s  = (m - 1 )% (k + 1) + 1&lt;/p&gt;
&lt;p&gt;但不难发现有： old = (new + s - 1) % (k + 1) + 1&lt;/p&gt;
&lt;p&gt;综上有逆推式： old =(new + m - 1) % (k + 1) + 1&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="链表
" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>人生的不幸</title>
    <link href="https://blog.come2rss.xyz/2021/06/19/sui-tan/ren-sheng-de-bu-xing/"/>
    <id>https://blog.come2rss.xyz/2021/06/19/sui-tan/ren-sheng-de-bu-xing/</id>
    <published>2021-06-19T03:55:25.000Z</published>
    <updated>2021-06-19T03:56:42.280Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;人生中最痛苦不是身体残疾，目不能视，耳不能听；也不是原生家庭带来性格扭曲，从小的身微言轻，家境清贫；更不是高考落榜，身陷囹圄，工作遇阻。而是无法接受现状，不能认清自我的能力的边界，贪求不能现在得到的欲望，终日惶惶思索财路，入睡夜夜欲求不止。这种终身收自己精神折磨的人，从不愿</summary>
        
      
    
    
    
    <category term="随谈" scheme="https://blog.come2rss.xyz/categories/%E9%9A%8F%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>1239. 串联字符串的最大长度</title>
    <link href="https://blog.come2rss.xyz/2021/06/19/shua-ti-wei-yun-suan-1239-chuan-lian-zi-fu-chuan-de-zui-da-chang-du/"/>
    <id>https://blog.come2rss.xyz/2021/06/19/shua-ti-wei-yun-suan-1239-chuan-lian-zi-fu-chuan-de-zui-da-chang-du/</id>
    <published>2021-06-19T03:47:14.000Z</published>
    <updated>2021-06-19T03:49:29.460Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h2&gt;&lt;p&gt;二进制化 + 二位搜索&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="位运算
" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    
  </entry>
  
  <entry>
    <title>最大值减去最小值小于或等于num的子数组数量</title>
    <link href="https://blog.come2rss.xyz/2021/06/17/shua-ti/shu-ju-jie-gou/zhan-he-dui-lie/zui-da-zhi-jian-qu-zui-xiao-zhi-xiao-yu-huo-deng-yu-num-de-zi-shu-zu-shu-liang/"/>
    <id>https://blog.come2rss.xyz/2021/06/17/shua-ti/shu-ju-jie-gou/zhan-he-dui-lie/zui-da-zhi-jian-qu-zui-xiao-zhi-xiao-yu-huo-deng-yu-num-de-zi-shu-zu-shu-liang/</id>
    <published>2021-06-17T00:45:14.000Z</published>
    <updated>2021-06-17T00:45:49.260Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;最大值减去最小值小于或等于num的子数组数量&quot;&gt;&lt;a href=&quot;#最大值减去最小值小于或等于num的子数组数量&quot; class=&quot;headerlink&quot; title=&quot;最大值减去最小值小于或等于num的子数组数量&quot;&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/5fe02eb175974e18b9a546812a17428e?tpId=101&amp;&amp;tqId=33086&amp;rp=1&amp;ru=/ta/programmer-code-interview-guide&amp;qru=/ta/programmer-code-interview-guide/question-ranking&quot;&gt;最大值减去最小值小于或等于num的子数组数量&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;超级复合怪&lt;/p&gt;</summary>
    
    
    
    <category term="刷题" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="数据结构" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="栈和队列" scheme="https://blog.come2rss.xyz/categories/%E5%88%B7%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    
    
  </entry>
  
</feed>
